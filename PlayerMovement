using System.Collections;
using System.Collections.Generic;
using System.Net.Http.Headers;
using UnityEngine;
using UnityEngine.UI;

public class PlayerMovement : MonoBehaviour
{
    public float turnSpeed = 20f;
    public float normalSpeed = 1f;
    public float boostSpeed = 2f;
    public float boostDuration = 3f;
    public float rechargeTime = 5f;

    public Image boostIcon;
    public Text freezeText;

    Animator m_Animator;
    Rigidbody m_Rigidbody;
    AudioSource m_AudioSource;
    Vector3 m_Movement;
    Quaternion m_Rotation = Quaternion.identity;

    private bool canBoost = true;
    private bool isFrozen = false;
    private int unfreezePresses = 0;
    private float currentSpeed;
    private float freezeTimer;
    private bool pressAllowed = true;
    private float pressCooldown = 0.1f;

    void Start()
    {
        m_Animator = GetComponent<Animator>();
        m_Rigidbody = GetComponent<Rigidbody>();
        m_AudioSource = GetComponent<AudioSource>();
        currentSpeed = normalSpeed;
        
        ResetFreezeTimer();

        if (boostIcon != null)
        {
            boostIcon.enabled = false;
        }
        if (freezeText != null) {
            freezeText.enabled = false;
        }
    }

    void FixedUpdate()
    {
        if (isFrozen) {
            HandleFrozenState();
            return;
        }
        
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");

        m_Movement.Set(horizontal, 0f, vertical);
        m_Movement.Normalize();

        bool hasHorizontalInput = !Mathf.Approximately(horizontal, 0f);
        bool hasVerticalInput = !Mathf.Approximately(vertical, 0f);
        bool isWalking = hasHorizontalInput || hasVerticalInput;
        m_Animator.SetBool("IsWalking", isWalking);

        if (isWalking)
        {
            if (!m_AudioSource.isPlaying)
            {
                m_AudioSource.Play();
            }
        }
        else
        {
            m_AudioSource.Stop();
        }

        if (Input.GetKey(KeyCode.LeftControl) && canBoost)
        {
            StartCoroutine(ActivateSpeedBoost());
        }

        freezeTimer -= Time.deltaTime;
        if (freezeTimer <= 0f) {
            FreezeInFear();
            ResetFreezeTimer();
        }

        Vector3 desiredForward = Vector3.RotateTowards(transform.forward, m_Movement, turnSpeed * Time.deltaTime, 0f);
        m_Rotation = Quaternion.LookRotation(desiredForward);
    }

    void OnAnimatorMove()
    {
        if (!isFrozen) {
            m_Rigidbody.MovePosition(m_Rigidbody.position + m_Movement * currentSpeed * m_Animator.deltaPosition.magnitude);
            m_Rigidbody.MoveRotation(m_Rotation);
        }
    }

    IEnumerator ActivateSpeedBoost()
    {
        canBoost = false;
        currentSpeed = boostSpeed;

        if (boostIcon != null)
        {
            boostIcon.enabled = true;
        }

        yield return new WaitForSeconds(boostDuration);

        if (boostIcon != null)
        {
            boostIcon.enabled = false;
        }
        currentSpeed = normalSpeed;

        yield return new WaitForSeconds(rechargeTime);

        canBoost = true;
    }

    void FreezeInFear() {
        isFrozen = true;
        unfreezePresses = 0;

        if (freezeText != null) {
            freezeText.enabled = true;
            freezeText.text = "Frozen! Press SPACE to break free!";
        }

        m_Animator.SetBool("IsWalking", false);
        m_AudioSource.Stop();

        StartCoroutine(AllowPress());
    }

    void HandleFrozenState() {
        if (Input.GetKey(KeyCode.Space) && pressAllowed) {
            unfreezePresses++;
            pressAllowed = false;
            StartCoroutine(AllowPress());

            if (freezeText != null) {
                freezeText.text = $"Frozen! Press SPACE to break free! ({unfreezePresses}/5)";
            }
            if (unfreezePresses >= 5) {
                Unfreeze();
            }
        }
    }

    IEnumerator AllowPress() {
        yield return new WaitForSeconds(pressCooldown);
        pressAllowed = true;
    }

    void Unfreeze() {
        isFrozen = false;

        if (freezeText != null) {
            freezeText.enabled = false;
        }
    }

    void ResetFreezeTimer() {
        freezeTimer = Random.Range(5f, 20f);
    }
}
